[x,y,z]= meshgrid (-10:10);
Fx=x.*y.*z;
Fy=sin(x).*y.^2;
Fz=z;
div=divergence(x,y,z,Fx,Fy,Fz);
% div2d(1:s(1),1:s(2)) = div(:,:,1);
% surf(div2d);
s=size(div);
% counterf(div2d);
quiver3(x,y,z,Fx,Fy,Fz);
[RotX,RotY,RotZ]=curl(x,y,z,Fx,Fy,Fz);
Fx2d=Fx(:,:,1);
% Fy2d(1:11,1:11)=Fy(1,:,:);
% s=size(Fx);
Rotx2d((1:s(1)),(1:s(2)))=RotX(1,:,:);
Roty2d((1:s(1)),(1:s(2)))=RotY(1,:,:);
Rotz2d((1:s(1)),(1:s(2)))=RotZ(1,:,:);
% quiver(x,z,RotX,RotZ);
% quiver(x2d,x2d,RotX,Rotz);
% Rotx2d((1:s(1)),(1:s(2)))=Fx(10,:,:);
% Roty2d((1:s(1)),(1:s(2)))=Fy(10,:,:);
% Rotz2d((1:s(1)),(1:s(2)))=Fy(10,:,:);
x2d((1:s(2)),(1:s(3)))=x(1,:,:);
y2d((1:s(2)),(1:s(3)))=y(1,:,:);
z2d((1:s(2)),(1:s(3)))=z(1,:,:);
% quiver(x2d,z2d,RotX,RotZ);
% quiver(x2d,z2d,Fx2d,Fz2d);